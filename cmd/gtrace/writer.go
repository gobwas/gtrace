package main

import (
	"bufio"
	"container/list"
	"fmt"
	"go/token"
	"go/types"
	"io"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

type Writer struct {
	Output io.Writer

	once sync.Once
	bw   *bufio.Writer

	atBOL bool
	depth int
	scope *list.List

	pkg *types.Package
}

func (w *Writer) Write(p Package) error {
	w.pkg = p.Package

	w.init()
	w.line(`// Code generated by gtrace. DO NOT EDIT.`)
	w.line()
	w.line(`package `, p.Name())
	w.line()

	var deps []dep
	for _, trace := range p.Traces {
		deps = w.traceImports(deps, trace)
	}
	w.importDeps(deps)

	for _, trace := range p.Traces {
		w.compose(trace)
		if trace.Flag.Has(GenContext) {
			w.context(trace)
		}
		for _, hook := range trace.Hooks {
			w.hook(trace, hook)
		}
	}
	for _, trace := range p.Traces {
		if !trace.Flag.Has(GenShortcut) {
			continue
		}
		for _, hook := range trace.Hooks {
			w.hookShortcut(trace, hook)
		}
	}

	return w.bw.Flush()
}

func (w *Writer) init() {
	w.once.Do(func() {
		w.bw = bufio.NewWriter(w.Output)
		w.scope = list.New()
	})
}

func (w *Writer) declare(name string) string {
	s := w.scope.Back().Value.(*scope)
	for i := 0; ; i++ {
		v := name
		if i > 0 {
			v += strconv.Itoa(i)
		}
		if !token.IsKeyword(v) && s.set(v) {
			return v
		}
	}
}

func (w *Writer) capture(vars ...string) {
	s := w.scope.Back().Value.(*scope)
	for _, v := range vars {
		if !s.set(v) {
			panic(fmt.Sprintf("can't capture variable %q", v))
		}
	}
}

type dep struct {
	pkgPath string
	pkgName string
	typName string
}

func (w *Writer) imports(dst []dep, t types.Type) []dep {
	if p, ok := t.(*types.Pointer); ok {
		return w.imports(dst, p.Elem())
	}
	n, ok := t.(*types.Named)
	if !ok {
		return dst
	}
	var (
		obj = n.Obj()
		pkg = obj.Pkg()
	)
	if pkg != nil && pkg.Path() != w.pkg.Path() {
		return append(dst, dep{
			pkgPath: pkg.Path(),
			pkgName: pkg.Name(),
			typName: obj.Name(),
		})
	}
	return dst
}

func forEachField(s *types.Struct, fn func(*types.Var)) {
	for i := 0; i < s.NumFields(); i++ {
		fn(s.Field(i))
	}
}

func unwrapStruct(t types.Type) (n *types.Named, s *types.Struct) {
	var ok bool
	n, ok = t.(*types.Named)
	if ok {
		s, _ = n.Underlying().(*types.Struct)
	}
	return
}

func (w *Writer) funcImports(dst []dep, fn Func) []dep {
	for _, t := range fn.Params {
		dst = w.imports(dst, t)
		if _, s := unwrapStruct(t); s != nil {
			forEachField(s, func(v *types.Var) {
				if v.Exported() {
					dst = w.imports(dst, v.Type())
				}
			})
		}
	}
	for _, fn := range fn.Result {
		dst = w.funcImports(dst, fn)
	}
	return dst
}

func (w *Writer) traceImports(dst []dep, t Trace) []dep {
	if t.Flag.Has(GenContext) {
		dst = append(dst, dep{
			pkgPath: "context",
			pkgName: "context",
			typName: "Context",
		})
	}
	for _, h := range t.Hooks {
		dst = w.funcImports(dst, h.Func)
	}
	return dst
}

func (w *Writer) importDeps(deps []dep) {
	var seen map[string]bool
	for _, d := range deps {
		if seen == nil {
			seen = make(map[string]bool)
			w.line(`import (`)
		}
		if seen[d.pkgPath] {
			continue
		}
		seen[d.pkgPath] = true
		w.line("\t", `"`, d.pkgPath, `"`)
	}
	if len(seen) > 0 {
		w.line(`)`)
		w.line()
	}
}

func (w *Writer) call(args []string) {
	w.code(`(`)
	for i, name := range args {
		if i > 0 {
			w.code(`, `)
		}
		w.code(name)
	}
	w.line(`)`)
}

func (w *Writer) compose(trace Trace) {
	w.newScope(func() {
		t := w.declare("t")
		x := w.declare("x")
		ret := w.declare("ret")
		w.line(`// Compose returns a new `, trace.Name, ` which has functional fields composed`)
		w.line(`// both from `, t, ` and `, x, `.`)
		w.code(`func (`, t, ` `, trace.Name, `) Compose(`, x, ` `, trace.Name, `) `)
		w.line(`(`, ret, ` `, trace.Name, `) {`)
		w.block(func() {
			for _, hook := range trace.Hooks {
				w.composeHook(hook, t, x, ret+"."+hook.Name)
			}
			w.line(`return `, ret)
		})
		w.line(`}`)
	})
}

func (w *Writer) composeHook(hook Hook, t1, t2, dst string) {
	w.line(`switch {`)
	w.line(`case `, t1, `.`, hook.Name, ` == nil:`)
	w.line("\t", dst, ` = `, t2, `.`, hook.Name)
	w.line(`case `, t2, `.`, hook.Name, ` == nil:`)
	w.line("\t", dst, ` = `, t1, `.`, hook.Name)
	w.line(`default:`)
	w.block(func() {
		h1 := w.declare("h1")
		h2 := w.declare("h2")
		w.line(h1, ` := `, t1, `.`, hook.Name)
		w.line(h2, ` := `, t2, `.`, hook.Name)
		w.code(dst, ` = `)
		w.composeHookCall(hook.Func, h1, h2)
	})
	w.line(`}`)
}

func (w *Writer) composeHookCall(fn Func, h1, h2 string) {
	w.newScope(func() {
		w.capture(h1, h2)
		w.block(func() {
			w.capture(h1, h2)
			w.code(`func`)
			args := w.funcParams(fn.Params)
			w.funcResults(fn)
			w.line(`{`)
			var (
				r1 string
				r2 string
				rs []string
			)
			if fn.HasResult() {
				r1 = w.declare("r1")
				r2 = w.declare("r2")
				rs = []string{r1, r2}
			}
			for i, h := range []string{h1, h2} {
				if fn.HasResult() {
					w.code(rs[i], ` := `)
				}
				w.code(h)
				w.call(args)
			}
			if fn.HasResult() {
				w.line(`switch {`)
				w.line(`case `, r1, ` == nil:`)
				w.line("\t", `return `, r2)
				w.line(`case `, r2, ` == nil:`)
				w.line("\t", `return `, r1)
				w.line(`default:`)
				w.block(func() {
					w.code(`return `)
					w.composeHookCall(fn.Result[0], r1, r2)
				})
				w.line(`}`)
			}
		})
		w.line(`}`)
	})
}

var contextType = (func() types.Type {
	pkg := types.NewPackage("context", "context")
	typ := types.NewInterfaceType(nil, nil)
	name := types.NewTypeName(0, pkg, "Context", typ)
	return types.NewNamed(name, typ, nil)
})()

func (w *Writer) hook(trace Trace, hook Hook) {
	w.newScope(func() {
		t := w.declare("t")
		x := w.declare("c") // For context's trace.
		fn := w.declare("fn")

		w.code(`func (`, t, ` `, trace.Name, `) `, unexported(hook.Name))

		w.code(`(`)
		var ctx string
		if trace.Flag.Has(GenContext) {
			ctx = w.declare("ctx")
			w.code(ctx, ` context.Context`)
		}
		var args []string
		for i, t := range hook.Func.Params {
			if i > 0 || ctx != "" {
				w.code(`, `)
			}
			args = w.funcParam(args, i, t)
		}
		w.code(`) `)
		w.funcResults(hook.Func)
		w.line(`{`)
		w.block(func() {
			if ctx != "" {
				w.line(x, ` := Context`, trace.Name, `(`, ctx, `)`)
				w.code(`var fn `)
				w.funcSign(hook.Func)
				w.line()
				w.composeHook(hook, t, x, fn)
			} else {
				w.line(fn, ` := `, t, `.`, hook.Name)
			}
			w.line(`if `, fn, ` == nil {`)
			w.block(func() {
				w.zeroReturn(hook.Func)
			})
			w.line(`}`)

			w.hookFuncCall(hook.Func, fn, args)
		})
		w.line(`}`)
	})
}

func (w *Writer) hookFuncCall(fn Func, name string, args []string) {
	var res string
	if fn.HasResult() {
		res = w.declare("res")
		w.code(res, ` := `)
	}

	w.code(name)
	w.call(args)

	if fn.HasResult() {
		w.line(`if `, res, ` == nil {`)
		w.block(func() {
			w.zeroReturn(fn)
		})
		w.line(`}`)
		if fn.Result[0].HasResult() {
			w.newScope(func() {
				w.code(`return func`)
				args := w.funcParams(fn.Result[0].Params)
				w.funcResults(fn.Result[0])
				w.line(`{`)
				w.block(func() {
					w.hookFuncCall(fn.Result[0], res, args)
				})
				w.line(`}`)
			})
		} else {
			w.line(`return `, res)
		}
	}
}

func (w *Writer) context(trace Trace) {
	w.line()
	w.line(`type `, unexported(trace.Name), `ContextKey struct{}`)
	w.line()

	w.newScope(func() {
		var (
			ctx = w.declare("ctx")
			t   = w.declare("t")
		)
		w.line(`// With`, trace.Name, ` returns context which has associated `, trace.Name, ` with it.`)
		w.code(`func With`, trace.Name, `(`)
		w.code(ctx, ` context.Context, `)
		w.code(t, ` `, trace.Name, `) `)
		w.line(`context.Context {`)
		w.block(func() {
			w.line(`return context.WithValue(`, ctx, `,`)
			w.line("\t", unexported(trace.Name), `ContextKey{},`)
			w.line("\t", `Context`, trace.Name, `(`, ctx, `).Compose(`, t, `),`)
			w.line(`)`)
		})
		w.line(`}`)
		w.line()
	})
	w.newScope(func() {
		var (
			ctx = w.declare("ctx")
			t   = w.declare("t")
		)
		w.line(`// Context`, trace.Name, ` returns `, trace.Name, ` associated with `, ctx, `.`)
		w.line(`// If there is no `, trace.Name, ` associated with `, ctx, ` then zero value `)
		w.line(`// of `, trace.Name, ` is returned.`)
		w.code(`func Context`, trace.Name, `(`, ctx, ` context.Context) `)
		w.line(trace.Name, ` {`)
		w.block(func() {
			w.code(t, `, _ := ctx.Value(`, unexported(trace.Name), `ContextKey{})`)
			w.line(`.(`, trace.Name, `)`)
			w.line(`return `, t)
		})
		w.line(`}`)
		w.line()
	})
}

func (w *Writer) flattenParams(params []types.Type) (args []*types.Var) {
	for _, p := range params {
		_, s := unwrapStruct(p)
		if s != nil {
			args = w.flattenStruct(args, s)
			continue
		}
		name := w.declare(short(p.String()))
		args = append(args, types.NewParam(0, nil, name, p))
	}
	return args
}

func (w *Writer) flattenStruct(args []*types.Var, s *types.Struct) []*types.Var {
	forEachField(s, func(f *types.Var) {
		if !f.Exported() {
			return
		}
		name := w.declare(short(f.Name()))
		args = append(args, types.NewParam(0, nil, name, f.Type()))
	})
	return args
}

func (w *Writer) constructParams(params []types.Type, vars []*types.Var) (res []string) {
	for _, p := range params {
		n, s := unwrapStruct(p)
		if s != nil {
			var v string
			v, vars = w.constructStruct(n, s, vars)
			res = append(res, v)
			continue
		}
		v := vars[0]
		vars = vars[1:]
		res = append(res, v.Name())
	}
	return res
}

func (w *Writer) constructStruct(n *types.Named, s *types.Struct, vars []*types.Var) (string, []*types.Var) {
	p := w.declare("p")
	// TODO Ptr
	// maybe skip pointers from flattening to not allocate anyhing during trace.
	w.line(`var `, p, ` `, w.typeString(n))
	for i := 0; i < s.NumFields(); i++ {
		v := s.Field(i)
		if !v.Exported() {
			continue
		}
		val := vars[0]
		vars = vars[1:]
		w.line(p, `.`, v.Name(), ` = `, val.Name())
	}
	return p, vars
}

func short(s string) string {
	s = strings.TrimFunc(s, func(r rune) bool {
		return !unicode.IsLetter(r)
	})
	r, _ := utf8.DecodeRuneInString(s)
	if r == utf8.RuneError {
		panic("invalid string")
	}
	return string(unicode.ToLower(r))
}

func (w *Writer) hookShortcut(trace Trace, hook Hook) {
	w.newScope(func() {
		t := w.declare("t")
		w.code(`func `, unexported(trace.Name), hook.Name)
		w.code(`(`)
		var ctx string
		if trace.Flag.Has(GenContext) {
			ctx = w.declare("ctx")
			w.code(ctx, ` context.Context`)
			w.code(`, `)
		}
		w.code(t, ` `, trace.Name)

		params := w.flattenParams(hook.Func.Params)
		for _, v := range params {
			w.code(`, `)
			w.code(v.Name(), ` `, w.typeString(v.Type()))
		}
		w.code(`) `)
		if hook.Func.HasResult() {
			w.shortcutFuncSign(hook.Func.Result[0])
		}
		w.line(`{`)
		w.block(func() {
			for _, p := range params {
				w.capture(p.Name())
			}
			vars := w.constructParams(hook.Func.Params, params)
			var res string
			if hook.Func.HasResult() {
				res = w.declare("res")
				w.code(res, ` := `)
			}
			w.code(t, `.`, unexported(hook.Name))
			if ctx != "" {
				vars = append([]string{ctx}, vars...)
			}
			w.call(vars)
			if hook.Func.HasResult() {
				w.code(`return `)
				w.hookFuncShortcut(hook.Func.Result[0], res)
			}
		})
		w.line(`}`)
	})
}

func (w *Writer) hookFuncShortcut(fn Func, name string) {
	w.code(`func(`)
	args := w.flattenParams(fn.Params)
	for i, v := range args {
		if i > 0 {
			w.code(`, `)
		}
		w.code(v.Name(), ` `, w.typeString(v.Type()))
	}
	w.code(`) `)
	if fn.HasResult() {
		w.shortcutFuncSign(fn.Result[0])
	}
	w.line(`{`)
	w.block(func() {
		for _, arg := range args {
			w.capture(arg.Name())
		}
		params := w.constructParams(fn.Params, args)
		var res string
		if fn.HasResult() {
			res = w.declare("res")
			w.code(res, ` := `)
		}
		w.code(name)
		w.call(params)
		if fn.HasResult() {
			w.code(`return `)
			w.hookFuncShortcut(fn.Result[0], res)
		}
	})
	w.line(`}`)
}

func (w *Writer) shortcutFuncSign(fn Func) {
	w.code(`func(`)
	args := w.flattenParams(fn.Params)
	for i, v := range args {
		if i > 0 {
			w.code(`, `)
		}
		w.code(w.typeString(v.Type()))
	}
	w.code(`) `)
	for _, fn := range fn.Result {
		w.shortcutFuncSign(fn)
	}
}

func (w *Writer) zeroReturn(fn Func) {
	if !fn.HasResult() {
		w.line(`return`)
		return
	}
	fn = fn.Result[0]
	w.code(`return `)
	w.funcSign(fn)
	w.line(`{`)
	w.block(func() {
		w.zeroReturn(fn)
	})
	w.line(`}`)
}

func (w *Writer) funcParams(params []types.Type) (vars []string) {
	w.code(`(`)
	for i, t := range params {
		if i > 0 {
			w.code(`, `)
		}
		vars = w.funcParam(vars, i, t)
	}
	w.code(`) `)
	return
}

func (w *Writer) funcParam(vars []string, i int, t types.Type) []string {
	name := w.declare("in" + strconv.Itoa(i))
	w.code(name, ` `)
	w.code(w.typeString(t))
	return append(vars, name)
}

func (w *Writer) funcResults(fn Func) {
	for _, fn := range fn.Result {
		w.funcSign(fn)
	}
}

func (w *Writer) funcSign(fn Func) {
	w.code(`func(`)
	for i, t := range fn.Params {
		if i > 0 {
			w.code(`, `)
		}
		w.code(w.typeString(t))
	}
	w.code(`) `)
	for _, fn := range fn.Result {
		w.funcSign(fn)
	}
}

func (w *Writer) typeString(t types.Type) string {
	return types.TypeString(t, func(pkg *types.Package) string {
		if pkg.Path() == w.pkg.Path() {
			return "" // same package; unqualified
		}
		return pkg.Name()
	})
}

func (w *Writer) tab(n int) {
	w.depth += n
}

func (w *Writer) block(fn func()) {
	w.depth++
	w.newScope(fn)
	w.depth--
}

func (w *Writer) newScope(fn func()) {
	w.scope.PushBack(new(scope))
	fn()
	w.scope.Remove(w.scope.Back())
}

func (w *Writer) line(args ...string) {
	w.code(args...)
	w.bw.WriteByte('\n')
	w.atBOL = true
}

func (w *Writer) code(args ...string) {
	if w.atBOL {
		for i := 0; i < w.depth; i++ {
			w.bw.WriteByte('\t')
		}
		w.atBOL = false
	}
	for _, arg := range args {
		w.bw.WriteString(arg)
	}
}

func unexported(s string) string {
	r, size := utf8.DecodeRuneInString(s)
	return string(unicode.ToLower(r)) + s[size:]
}

type scope struct {
	vars map[string]struct{}
}

func (s *scope) set(v string) bool {
	if s.vars == nil {
		s.vars = make(map[string]struct{})
	}
	if _, has := s.vars[v]; has {
		return false
	}
	s.vars[v] = struct{}{}
	return true
}

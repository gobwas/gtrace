// Code generated by gtrace. DO NOT EDIT.

package test

import (
	"context"
)

// Compose returns a new Trace which has functional fields composed
// both from t and x.
func (t Trace) Compose(x Trace) (ret Trace) {
	switch {
	case t.OnTest == nil:
		ret.OnTest = x.OnTest
	case x.OnTest == nil:
		ret.OnTest = t.OnTest
	default:
		h1 := t.OnTest
		h2 := x.OnTest
		ret.OnTest = func(in0 string) func(string) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 string) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	switch {
	case t.OnAction == nil:
		ret.OnAction = x.OnAction
	case x.OnAction == nil:
		ret.OnAction = t.OnAction
	default:
		h1 := t.OnAction
		h2 := x.OnAction
		ret.OnAction = func(in0 TraceActionStart) func(TraceActionDone) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 TraceActionDone) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	switch {
	case t.OnActionPtr == nil:
		ret.OnActionPtr = x.OnActionPtr
	case x.OnActionPtr == nil:
		ret.OnActionPtr = t.OnActionPtr
	default:
		h1 := t.OnActionPtr
		h2 := x.OnActionPtr
		ret.OnActionPtr = func(in0 *TraceActionStart) func(*TraceActionDone) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 *TraceActionDone) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	switch {
	case t.OnSomething0 == nil:
		ret.OnSomething0 = x.OnSomething0
	case x.OnSomething0 == nil:
		ret.OnSomething0 = t.OnSomething0
	default:
		h1 := t.OnSomething0
		h2 := x.OnSomething0
		ret.OnSomething0 = func(in0 int8) func(int16) func(int32) func(int64) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 int16) func(int32) func(int64) {
					r11 := r1(in0)
					r21 := r2(in0)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(in0 int32) func(int64) {
							r1 := r11(in0)
							r2 := r21(in0)
							switch {
							case r1 == nil:
								return r2
							case r2 == nil:
								return r1
							default:
								return func(in0 int64) {
									r1(in0)
									r2(in0)
								}
							}
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnSomething1 == nil:
		ret.OnSomething1 = x.OnSomething1
	case x.OnSomething1 == nil:
		ret.OnSomething1 = t.OnSomething1
	default:
		h1 := t.OnSomething1
		h2 := x.OnSomething1
		ret.OnSomething1 = func(in0 int8, in1 int16) func(int32, int64) {
			r1 := h1(in0, in1)
			r2 := h2(in0, in1)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 int32, in1 int64) {
					r1(in0, in1)
					r2(in0, in1)
				}
			}
		}
	}
	switch {
	case t.OnSomething2 == nil:
		ret.OnSomething2 = x.OnSomething2
	case x.OnSomething2 == nil:
		ret.OnSomething2 = t.OnSomething2
	default:
		h1 := t.OnSomething2
		h2 := x.OnSomething2
		ret.OnSomething2 = func(in0 Type) func(Type) func(Type) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 Type) func(Type) {
					r11 := r1(in0)
					r21 := r2(in0)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(in0 Type) {
							r11(in0)
							r21(in0)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnAnother == nil:
		ret.OnAnother = x.OnAnother
	case x.OnAnother == nil:
		ret.OnAnother = t.OnAnother
	default:
		h1 := t.OnAnother
		h2 := x.OnAnother
		ret.OnAnother = func() {
			h1()
			h2()
		}
	}
	return ret
}

type traceContextKey struct{}

// WithTrace returns context which has associated Trace with it.
func WithTrace(ctx context.Context, t Trace) context.Context {
	return context.WithValue(ctx,
		traceContextKey{},
		ContextTrace(ctx).Compose(t),
	)
}

// ContextTrace returns Trace associated with ctx.
// If there is no Trace associated with ctx then zero value 
// of Trace is returned.
func ContextTrace(ctx context.Context) Trace {
	t, _ := ctx.Value(traceContextKey{}).(Trace)
	return t
}

func (t Trace) onTest(ctx context.Context, in0 string) func(string) {
	c := ContextTrace(ctx)
	var fn func(string) func(string) 
	switch {
	case t.OnTest == nil:
		fn = c.OnTest
	case c.OnTest == nil:
		fn = t.OnTest
	default:
		h1 := t.OnTest
		h2 := c.OnTest
		fn = func(in0 string) func(string) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 string) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	if fn == nil {
		return func(string) {
			return
		}
	}
	res := fn(in0)
	if res == nil {
		return func(string) {
			return
		}
	}
	return res
}
func (t Trace) onAction(ctx context.Context, in0 TraceActionStart) func(TraceActionDone) {
	c := ContextTrace(ctx)
	var fn func(TraceActionStart) func(TraceActionDone) 
	switch {
	case t.OnAction == nil:
		fn = c.OnAction
	case c.OnAction == nil:
		fn = t.OnAction
	default:
		h1 := t.OnAction
		h2 := c.OnAction
		fn = func(in0 TraceActionStart) func(TraceActionDone) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 TraceActionDone) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	if fn == nil {
		return func(TraceActionDone) {
			return
		}
	}
	res := fn(in0)
	if res == nil {
		return func(TraceActionDone) {
			return
		}
	}
	return res
}
func (t Trace) onActionPtr(ctx context.Context, in0 *TraceActionStart) func(*TraceActionDone) {
	c := ContextTrace(ctx)
	var fn func(*TraceActionStart) func(*TraceActionDone) 
	switch {
	case t.OnActionPtr == nil:
		fn = c.OnActionPtr
	case c.OnActionPtr == nil:
		fn = t.OnActionPtr
	default:
		h1 := t.OnActionPtr
		h2 := c.OnActionPtr
		fn = func(in0 *TraceActionStart) func(*TraceActionDone) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 *TraceActionDone) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	if fn == nil {
		return func(*TraceActionDone) {
			return
		}
	}
	res := fn(in0)
	if res == nil {
		return func(*TraceActionDone) {
			return
		}
	}
	return res
}
func (t Trace) onSomething0(ctx context.Context, in0 int8) func(int16) func(int32) func(int64) {
	c := ContextTrace(ctx)
	var fn func(int8) func(int16) func(int32) func(int64) 
	switch {
	case t.OnSomething0 == nil:
		fn = c.OnSomething0
	case c.OnSomething0 == nil:
		fn = t.OnSomething0
	default:
		h1 := t.OnSomething0
		h2 := c.OnSomething0
		fn = func(in0 int8) func(int16) func(int32) func(int64) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 int16) func(int32) func(int64) {
					r11 := r1(in0)
					r21 := r2(in0)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(in0 int32) func(int64) {
							r1 := r11(in0)
							r2 := r21(in0)
							switch {
							case r1 == nil:
								return r2
							case r2 == nil:
								return r1
							default:
								return func(in0 int64) {
									r1(in0)
									r2(in0)
								}
							}
						}
					}
				}
			}
		}
	}
	if fn == nil {
		return func(int16) func(int32) func(int64) {
			return func(int32) func(int64) {
				return func(int64) {
					return
				}
			}
		}
	}
	res := fn(in0)
	if res == nil {
		return func(int16) func(int32) func(int64) {
			return func(int32) func(int64) {
				return func(int64) {
					return
				}
			}
		}
	}
	return func(in0 int16) func(int32) func(int64) {
		res := res(in0)
		if res == nil {
			return func(int32) func(int64) {
				return func(int64) {
					return
				}
			}
		}
		return func(in0 int32) func(int64) {
			res := res(in0)
			if res == nil {
				return func(int64) {
					return
				}
			}
			return res
		}
	}
}
func (t Trace) onSomething1(ctx context.Context, in0 int8, in1 int16) func(int32, int64) {
	c := ContextTrace(ctx)
	var fn func(int8, int16) func(int32, int64) 
	switch {
	case t.OnSomething1 == nil:
		fn = c.OnSomething1
	case c.OnSomething1 == nil:
		fn = t.OnSomething1
	default:
		h1 := t.OnSomething1
		h2 := c.OnSomething1
		fn = func(in0 int8, in1 int16) func(int32, int64) {
			r1 := h1(in0, in1)
			r2 := h2(in0, in1)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 int32, in1 int64) {
					r1(in0, in1)
					r2(in0, in1)
				}
			}
		}
	}
	if fn == nil {
		return func(int32, int64) {
			return
		}
	}
	res := fn(in0, in1)
	if res == nil {
		return func(int32, int64) {
			return
		}
	}
	return res
}
func (t Trace) onSomething2(ctx context.Context, in0 Type) func(Type) func(Type) {
	c := ContextTrace(ctx)
	var fn func(Type) func(Type) func(Type) 
	switch {
	case t.OnSomething2 == nil:
		fn = c.OnSomething2
	case c.OnSomething2 == nil:
		fn = t.OnSomething2
	default:
		h1 := t.OnSomething2
		h2 := c.OnSomething2
		fn = func(in0 Type) func(Type) func(Type) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 Type) func(Type) {
					r11 := r1(in0)
					r21 := r2(in0)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(in0 Type) {
							r11(in0)
							r21(in0)
						}
					}
				}
			}
		}
	}
	if fn == nil {
		return func(Type) func(Type) {
			return func(Type) {
				return
			}
		}
	}
	res := fn(in0)
	if res == nil {
		return func(Type) func(Type) {
			return func(Type) {
				return
			}
		}
	}
	return func(in0 Type) func(Type) {
		res := res(in0)
		if res == nil {
			return func(Type) {
				return
			}
		}
		return res
	}
}
func (t Trace) onAnother(ctx context.Context) {
	c := ContextTrace(ctx)
	var fn func() 
	switch {
	case t.OnAnother == nil:
		fn = c.OnAnother
	case c.OnAnother == nil:
		fn = t.OnAnother
	default:
		h1 := t.OnAnother
		h2 := c.OnAnother
		fn = func() {
			h1()
			h2()
		}
	}
	if fn == nil {
		return
	}
	fn()
}
func traceOnTest(ctx context.Context, t Trace, s string) func(string) {
	res := t.onTest(ctx, s)
	return func(s1 string) {
		res(s1)
	}
}
func traceOnAction(ctx context.Context, t Trace, s string, n Type) func(error) {
	var p TraceActionStart
	p.String = s
	p.Nested = n
	res := t.onAction(ctx, p)
	return func(e error) {
		var p TraceActionDone
		p.Error = e
		res(p)
	}
}
func traceOnActionPtr(ctx context.Context, t Trace, t1 *TraceActionStart) func(*TraceActionDone) {
	res := t.onActionPtr(ctx, t1)
	return func(t *TraceActionDone) {
		res(t)
	}
}
func traceOnSomething0(ctx context.Context, t Trace, i int8) func(int16) func(int32) func(int64) {
	res := t.onSomething0(ctx, i)
	return func(i1 int16) func(int32) func(int64) {
		res := res(i1)
		return func(i int32) func(int64) {
			res := res(i)
			return func(i1 int64) {
				res(i1)
			}
		}
	}
}
func traceOnSomething1(ctx context.Context, t Trace, i int8, i1 int16) func(int32, int64) {
	res := t.onSomething1(ctx, i, i1)
	return func(i2 int32, i3 int64) {
		res(i2, i3)
	}
}
func traceOnSomething2(ctx context.Context, t Trace, s string, i int, b bool, e error) func(string, int, bool, error) func(string, int, bool, error) {
	var p Type
	p.String = s
	p.Integer = i
	p.Boolean = b
	p.Error = e
	res := t.onSomething2(ctx, p)
	return func(s1 string, i1 int, b1 bool, e1 error) func(string, int, bool, error) {
		var p Type
		p.String = s1
		p.Integer = i1
		p.Boolean = b1
		p.Error = e1
		res := res(p)
		return func(s string, i int, b bool, e error) {
			var p Type
			p.String = s
			p.Integer = i
			p.Boolean = b
			p.Error = e
			res(p)
		}
	}
}
func traceOnAnother(ctx context.Context, t Trace) {
	t.onAnother(ctx)
}
